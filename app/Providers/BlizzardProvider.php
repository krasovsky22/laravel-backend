<?php


namespace App\Providers;

use Exception;
use Illuminate\Support\Facades\Config;
use Laravel\Socialite\Two\AbstractProvider;
use Laravel\Socialite\Two\ProviderInterface;
use Laravel\Socialite\Two\User;
use function array_merge;

class BlizzardProvider extends AbstractProvider implements ProviderInterface
{
    public function getAccessTokenResponse($code)
    {
        return parent::getAccessTokenResponse($code); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $token
     * @return bool
     */
    public function isTokenValid(string $token): bool
    {
        try {
            $response = $this->getHttpClient()->get($this->getBlizzardHost() . '/oauth/check_token?token=' . $token);
        } catch (Exception $e) {
            return false;
        }

        $response = json_decode($response->getBody(), true);
        return time() < $response['exp'];
    }

    /**
     * @param string $token
     * @return array
     */
    public function fetchWoWCharacters(string $token): array
    {
        $response = $this->getHttpClient()->get("https://{$this->getRegion()}.api.blizzard.com/wow/user/characters", [
            'headers' => [
                'Authorization' => 'Bearer ' . $token,
            ],
        ]);

        return json_decode($response->getBody(), true);
    }

    /**
     * @inheritDoc
     */
    protected function getAuthUrl($state)
    {
        return $this->buildAuthUrlFromBase($this->getBlizzardHost() . '/oauth/authorize', $state);
    }

    /**
     * @return string
     */
    private function getBlizzardHost(): string
    {
        $region = $this->getRegion();
        return "https://{$region}.battle.net";
    }

    /**
     * @return string
     */
    private function getRegion(): string
    {
        return Config::get('services.blizzard.region') ?? 'us';
    }

    /**
     * @inheritDoc
     */
    protected function getTokenUrl(): string
    {
        return $this->getBlizzardHost() . '/oauth/token';
    }

    /**
     * {@inheritdoc}
     */
    protected function getUserByToken($token): array
    {
        $response = $this->getHttpClient()->get($this->getBlizzardHost() . '/oauth/userinfo', [
            'headers' => [
                'Authorization' => 'Bearer ' . $token,
            ],
        ]);

        return json_decode($response->getBody(), true);
    }

    /**
     * @inheritDoc
     */
    protected function mapUserToObject(array $user): User
    {
        list($username, $discriminator) = explode('#', $user['battletag']);

        return (new User)->setRaw($user)->map([
            'id' => $user['id'],
            'name' => $user['battletag'],
            'email' => "{$username}@blizzard.com"
        ]);
    }

    /**
     * @param string $code
     * @return array
     */
    protected function getTokenFields($code)
    {
        return array_merge(parent::getTokenFields($code), [
            'grant_type' => 'authorization_code'
        ]);
    }
}
